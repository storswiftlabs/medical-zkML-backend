// Code generated from Python2Noir
// inputs quantization scale reciprocal: 255
// inputs quantization zero-point: 0
// quantize_type: uint8
use dep::std::println;
mod quantize_arithmetic;
fn trees0class0(inputs : [u32;12],) -> pub u32 {
	if inputs[11] <= 58 {
		if inputs[8] <= 171 {
			if inputs[7] <= 16 {
				142
			} else {
				193
			}
		} else {
			if inputs[2] <= 3 {
				108
			} else {
				if inputs[11] <= 20 {
					180
				} else {
					if inputs[6] <= 89 {
						89
					} else {
						170
					}
				}
			}
		}
	} else {
		if inputs[7] <= 30 {
			if inputs[4] <= 52 {
				if inputs[0] <= 58 {
					84
				} else {
					if inputs[5] <= 128 {
						if inputs[6] <= 76 {
							148
						} else {
							108
						}
					} else {
						101
					}
				}
			} else {
				if inputs[0] <= 181 {
					if inputs[6] <= 31 {
						108
					} else {
						54
					}
				} else {
					127
				}
			}
		} else {
			if inputs[4] <= 71 {
				if inputs[6] <= 57 {
					170
				} else {
					if inputs[1] <= 128 {
						106
					} else {
						153
					}
				}
			} else {
				if inputs[0] <= 151 {
					79
				} else {
					127
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees0class1(inputs : [u32;12],) -> pub u32 {
	if inputs[11] <= 58 {
		if inputs[8] <= 171 {
			if inputs[7] <= 16 {
				140
			} else {
				179
			}
		} else {
			if inputs[8] <= 193 {
				if inputs[11] <= 9 {
					162
				} else {
					if inputs[7] <= 18 {
						133
					} else {
						89
					}
				}
			} else {
				169
			}
		}
	} else {
		if inputs[7] <= 30 {
			if inputs[4] <= 52 {
				if inputs[6] <= 52 {
					86
				} else {
					if inputs[6] <= 68 {
						151
					} else {
						if inputs[0] <= 90 {
							123
						} else {
							99
						}
					}
				}
			} else {
				if inputs[0] <= 181 {
					if inputs[6] <= 41 {
						if inputs[11] <= 159 {
							127
						} else {
							92
						}
					} else {
						69
					}
				} else {
					127
				}
			}
		} else {
			if inputs[6] <= 62 {
				if inputs[6] <= 49 {
					126
				} else {
					161
				}
			} else {
				if inputs[2] <= 25 {
					if inputs[9] <= 128 {
						117
					} else {
						78
					}
				} else {
					139
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees1class0(inputs : [u32;12],) -> pub u32 {
	if inputs[11] <= 58 {
		if inputs[2] <= 3 {
			if inputs[0] <= 151 {
				115
			} else {
				156
			}
		} else {
			if inputs[4] <= 97 {
				170
			} else {
				134
			}
		}
	} else {
		if inputs[7] <= 30 {
			if inputs[4] <= 52 {
				if inputs[6] <= 52 {
					92
				} else {
					if inputs[6] <= 68 {
						148
					} else {
						if inputs[6] <= 85 {
							103
						} else {
							124
						}
					}
				}
			} else {
				if inputs[0] <= 181 {
					if inputs[2] <= 74 {
						78
					} else {
						117
					}
				} else {
					127
				}
			}
		} else {
			if inputs[4] <= 71 {
				if inputs[7] <= 42 {
					if inputs[1] <= 128 {
						138
					} else {
						164
					}
				} else {
					120
				}
			} else {
				if inputs[6] <= 62 {
					128
				} else {
					90
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees1class1(inputs : [u32;12],) -> pub u32 {
	if inputs[11] <= 63 {
		if inputs[8] <= 171 {
			if inputs[4] <= 129 {
				170
			} else {
				136
			}
		} else {
			if inputs[11] <= 20 {
				154
			} else {
				if inputs[6] <= 89 {
					if inputs[11] <= 52 {
						90
					} else {
						122
					}
				} else {
					150
				}
			}
		}
	} else {
		if inputs[7] <= 30 {
			if inputs[4] <= 52 {
				if inputs[0] <= 58 {
					94
				} else {
					if inputs[0] <= 90 {
						137
					} else {
						109
					}
				}
			} else {
				if inputs[6] <= 41 {
					123
				} else {
					if inputs[0] <= 181 {
						82
					} else {
						118
					}
				}
			}
		} else {
			if inputs[4] <= 71 {
				if inputs[6] <= 57 {
					161
				} else {
					if inputs[7] <= 42 {
						144
					} else {
						106
					}
				}
			} else {
				if inputs[0] <= 151 {
					95
				} else {
					130
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees2class0(inputs : [u32;12],) -> pub u32 {
	if inputs[11] <= 58 {
		if inputs[11] <= 10 {
			163
		} else {
			if inputs[8] <= 171 {
				if inputs[4] <= 106 {
					161
				} else {
					125
				}
			} else {
				if inputs[7] <= 16 {
					149
				} else {
					102
				}
			}
		}
	} else {
		if inputs[7] <= 30 {
			if inputs[4] <= 52 {
				if inputs[6] <= 52 {
					98
				} else {
					if inputs[6] <= 68 {
						146
					} else {
						if inputs[2] <= 11 {
							108
						} else {
							127
						}
					}
				}
			} else {
				if inputs[0] <= 181 {
					if inputs[6] <= 41 {
						116
					} else {
						85
					}
				} else {
					127
				}
			}
		} else {
			if inputs[11] <= 162 {
				if inputs[4] <= 110 {
					if inputs[6] <= 62 {
						166
					} else {
						130
					}
				} else {
					108
				}
			} else {
				if inputs[8] <= 157 {
					125
				} else {
					93
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees2class1(inputs : [u32;12],) -> pub u32 {
	if inputs[11] <= 63 {
		if inputs[0] <= 155 {
			if inputs[4] <= 97 {
				if inputs[2] <= 3 {
					123
				} else {
					if inputs[4] <= 52 {
						157
					} else {
						if inputs[6] <= 86 {
							129
						} else {
							141
						}
					}
				}
			} else {
				112
			}
		} else {
			163
		}
	} else {
		if inputs[7] <= 24 {
			if inputs[11] <= 154 {
				if inputs[11] <= 109 {
					if inputs[11] <= 69 {
						117
					} else {
						91
					}
				} else {
					if inputs[11] <= 130 {
						127
					} else {
						160
					}
				}
			} else {
				if inputs[2] <= 46 {
					84
				} else {
					118
				}
			}
		} else {
			if inputs[6] <= 62 {
				if inputs[2] <= 4 {
					123
				} else {
					157
				}
			} else {
				if inputs[2] <= 26 {
					if inputs[0] <= 144 {
						93
					} else {
						127
					}
				} else {
					141
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees3class0(inputs : [u32;12],) -> pub u32 {
	if inputs[11] <= 162 {
		if inputs[11] <= 44 {
			if inputs[2] <= 1 {
				125
			} else {
				if inputs[11] <= 22 {
					161
				} else {
					if inputs[2] <= 9 {
						127
					} else {
						140
					}
				}
			}
		} else {
			if inputs[11] <= 132 {
				if inputs[4] <= 97 {
					if inputs[0] <= 144 {
						if inputs[11] <= 68 {
							142
						} else {
							101
						}
					} else {
						if inputs[8] <= 171 {
							164
						} else {
							132
						}
					}
				} else {
					91
				}
			} else {
				158
			}
		}
	} else {
		if inputs[8] <= 131 {
			124
		} else {
			if inputs[2] <= 38 {
				85
			} else {
				126
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees3class1(inputs : [u32;12],) -> pub u32 {
	if inputs[11] <= 162 {
		if inputs[8] <= 164 {
			if inputs[6] <= 59 {
				if inputs[8] <= 149 {
					138
				} else {
					167
				}
			} else {
				if inputs[0] <= 155 {
					if inputs[6] <= 87 {
						104
					} else {
						136
					}
				} else {
					if inputs[11] <= 89 {
						153
					} else {
						131
					}
				}
			}
		} else {
			if inputs[4] <= 52 {
				if inputs[0] <= 81 {
					120
				} else {
					if inputs[11] <= 86 {
						134
					} else {
						159
					}
				}
			} else {
				if inputs[11] <= 39 {
					142
				} else {
					if inputs[8] <= 208 {
						91
					} else {
						132
					}
				}
			}
		}
	} else {
		if inputs[4] <= 71 {
			if inputs[7] <= 16 {
				100
			} else {
				if inputs[0] <= 88 {
					142
				} else {
					119
				}
			}
		} else {
			90
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees4class0(inputs : [u32;12],) -> pub u32 {
	if inputs[11] <= 162 {
		if inputs[4] <= 97 {
			if inputs[8] <= 164 {
				if inputs[6] <= 78 {
					162
				} else {
					121
				}
			} else {
				if inputs[6] <= 94 {
					if inputs[11] <= 108 {
						if inputs[11] <= 68 {
							132
						} else {
							93
						}
					} else {
						143
					}
				} else {
					158
				}
			}
		} else {
			if inputs[11] <= 41 {
				139
			} else {
				if inputs[11] <= 121 {
					98
				} else {
					132
				}
			}
		}
	} else {
		if inputs[4] <= 71 {
			if inputs[7] <= 16 {
				103
			} else {
				if inputs[2] <= 7 {
					119
				} else {
					143
				}
			}
		} else {
			93
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees4class1(inputs : [u32;12],) -> pub u32 {
	if inputs[11] <= 162 {
		if inputs[11] <= 10 {
			154
		} else {
			if inputs[4] <= 158 {
				if inputs[9] <= 128 {
					if inputs[2] <= 6 {
						118
					} else {
						160
					}
				} else {
					if inputs[4] <= 52 {
						if inputs[11] <= 65 {
							152
						} else {
							124
						}
					} else {
						if inputs[0] <= 158 {
							104
						} else {
							132
						}
					}
				}
			} else {
				99
			}
		}
	} else {
		if inputs[8] <= 131 {
			127
		} else {
			if inputs[2] <= 38 {
				92
			} else {
				131
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn count_prob<N>(class_prob : [u32;N],) -> pub u32 {
	let mut cls: Field = class_prob[0] as Field;
	for i in 1..N {
		cls = quantize_arithmetic::add(cls,127,128,class_prob[i] as Field,127,128,127,128);
	}
	cls = quantize_arithmetic::mul(cls,127,128,1,0,1,125,13);
	((cls*128) as u32)/128
}
fn main(inputs : [u32;12],) -> pub u32 {
	let trees0_class0: u32 = trees0class0(inputs);
	let trees0_class1: u32 = trees0class1(inputs);
	let trees1_class0: u32 = trees1class0(inputs);
	let trees1_class1: u32 = trees1class1(inputs);
	let trees2_class0: u32 = trees2class0(inputs);
	let trees2_class1: u32 = trees2class1(inputs);
	let trees3_class0: u32 = trees3class0(inputs);
	let trees3_class1: u32 = trees3class1(inputs);
	let trees4_class0: u32 = trees4class0(inputs);
	let trees4_class1: u32 = trees4class1(inputs);
	let c0: u32 = count_prob([trees0_class0, trees1_class0, trees2_class0, trees3_class0, trees4_class0]);
	let c1: u32 = count_prob([trees0_class1, trees1_class1, trees2_class1, trees3_class1, trees4_class1]);
	let mut max_ele_index: u32 = c0;
	let mut res: u32 = 0;
	if c1 > max_ele_index {
		max_ele_index = c1;
		res = 1;
	}
	println(res);
	res
}

