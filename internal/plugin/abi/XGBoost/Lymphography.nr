// Code generated from Python2Noir
// inputs quantization scale reciprocal: 255
// inputs quantization zero-point: 0
// quantize_type: uint8
use dep::std::println;
mod quantize_arithmetic;
fn trees0class0(inputs : [u32;18],) -> pub u32 {
	if inputs[1] <= 128 {
		if inputs[17] <= 55 {
			if inputs[5] <= 128 {
				if inputs[12] <= 213 {
					if inputs[13] <= 91 {
						127
					} else {
						if inputs[10] <= 191 {
							138
						} else {
							167
						}
					}
				} else {
					109
				}
			} else {
				105
			}
		} else {
			if inputs[15] <= 128 {
				119
			} else {
				101
			}
		}
	} else {
		if inputs[17] <= 91 {
			if inputs[12] <= 213 {
				if inputs[9] <= 213 {
					178
				} else {
					143
				}
			} else {
				if inputs[11] <= 128 {
					111
				} else {
					143
				}
			}
		} else {
			if inputs[13] <= 128 {
				136
			} else {
				if inputs[12] <= 128 {
					127
				} else {
					105
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees0class1(inputs : [u32;18],) -> pub u32 {
	if inputs[1] <= 128 {
		if inputs[7] <= 128 {
			if inputs[11] <= 128 {
				150
			} else {
				if inputs[10] <= 191 {
					136
				} else {
					111
				}
			}
		} else {
			if inputs[14] <= 64 {
				131
			} else {
				if inputs[4] <= 128 {
					176
				} else {
					143
				}
			}
		}
	} else {
		if inputs[12] <= 213 {
			if inputs[17] <= 55 {
				if inputs[12] <= 128 {
					if inputs[0] <= 128 {
						127
					} else {
						109
					}
				} else {
					100
				}
			} else {
				if inputs[9] <= 128 {
					if inputs[13] <= 128 {
						107
					} else {
						127
					}
				} else {
					if inputs[14] <= 191 {
						111
					} else {
						158
					}
				}
			}
		} else {
			if inputs[13] <= 182 {
				127
			} else {
				172
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees0class2(inputs : [u32;18],) -> pub u32 {
	if inputs[8] <= 64 {
		99
	} else {
		143
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees1class0(inputs : [u32;18],) -> pub u32 {
	if inputs[17] <= 55 {
		if inputs[1] <= 128 {
			if inputs[5] <= 128 {
				if inputs[12] <= 213 {
					if inputs[13] <= 91 {
						127
					} else {
						if inputs[10] <= 191 {
							136
						} else {
							160
						}
					}
				} else {
					111
				}
			} else {
				107
			}
		} else {
			if inputs[12] <= 213 {
				164
			} else {
				135
			}
		}
	} else {
		if inputs[14] <= 191 {
			if inputs[17] <= 91 {
				156
			} else {
				127
			}
		} else {
			if inputs[10] <= 191 {
				103
			} else {
				if inputs[12] <= 213 {
					if inputs[12] <= 128 {
						108
					} else {
						if inputs[4] <= 128 {
							124
						} else {
							155
						}
					}
				} else {
					106
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees1class1(inputs : [u32;18],) -> pub u32 {
	if inputs[1] <= 128 {
		if inputs[15] <= 128 {
			if inputs[10] <= 191 {
				if inputs[17] <= 18 {
					132
				} else {
					152
				}
			} else {
				117
			}
		} else {
			if inputs[14] <= 64 {
				if inputs[13] <= 182 {
					110
				} else {
					144
				}
			} else {
				164
			}
		}
	} else {
		if inputs[12] <= 213 {
			if inputs[17] <= 55 {
				if inputs[12] <= 128 {
					if inputs[10] <= 191 {
						110
					} else {
						129
					}
				} else {
					103
				}
			} else {
				if inputs[13] <= 128 {
					if inputs[10] <= 191 {
						128
					} else {
						108
					}
				} else {
					if inputs[2] <= 128 {
						154
					} else {
						112
					}
				}
			}
		} else {
			if inputs[13] <= 182 {
				126
			} else {
				161
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees1class2(inputs : [u32;18],) -> pub u32 {
	if inputs[8] <= 64 {
		102
	} else {
		142
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees2class0(inputs : [u32;18],) -> pub u32 {
	if inputs[17] <= 55 {
		if inputs[1] <= 128 {
			if inputs[5] <= 128 {
				if inputs[12] <= 213 {
					if inputs[13] <= 91 {
						127
					} else {
						if inputs[10] <= 191 {
							134
						} else {
							155
						}
					}
				} else {
					112
				}
			} else {
				109
			}
		} else {
			if inputs[13] <= 200 {
				158
			} else {
				if inputs[9] <= 128 {
					148
				} else {
					131
				}
			}
		}
	} else {
		if inputs[14] <= 191 {
			if inputs[17] <= 91 {
				151
			} else {
				127
			}
		} else {
			if inputs[12] <= 128 {
				105
			} else {
				if inputs[12] <= 213 {
					if inputs[4] <= 128 {
						125
					} else {
						150
					}
				} else {
					106
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees2class1(inputs : [u32;18],) -> pub u32 {
	if inputs[1] <= 128 {
		if inputs[7] <= 128 {
			if inputs[11] <= 128 {
				142
			} else {
				if inputs[13] <= 200 {
					111
				} else {
					135
				}
			}
		} else {
			if inputs[14] <= 64 {
				128
			} else {
				if inputs[10] <= 191 {
					158
				} else {
					if inputs[5] <= 128 {
						123
					} else {
						154
					}
				}
			}
		}
	} else {
		if inputs[12] <= 213 {
			if inputs[17] <= 55 {
				if inputs[12] <= 128 {
					if inputs[13] <= 128 {
						112
					} else {
						132
					}
				} else {
					105
				}
			} else {
				if inputs[14] <= 191 {
					if inputs[13] <= 200 {
						125
					} else {
						110
					}
				} else {
					if inputs[9] <= 128 {
						113
					} else {
						149
					}
				}
			}
		} else {
			if inputs[13] <= 182 {
				125
			} else {
				154
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees2class2(inputs : [u32;18],) -> pub u32 {
	if inputs[8] <= 64 {
		103
	} else {
		140
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees3class0(inputs : [u32;18],) -> pub u32 {
	if inputs[12] <= 213 {
		if inputs[12] <= 128 {
			if inputs[16] <= 128 {
				if inputs[13] <= 91 {
					134
				} else {
					152
				}
			} else {
				if inputs[17] <= 18 {
					135
				} else {
					if inputs[14] <= 191 {
						127
					} else {
						105
					}
				}
			}
		} else {
			if inputs[9] <= 213 {
				if inputs[1] <= 128 {
					if inputs[16] <= 128 {
						126
					} else {
						if inputs[13] <= 219 {
							150
						} else {
							131
						}
					}
				} else {
					if inputs[17] <= 91 {
						154
					} else {
						132
					}
				}
			} else {
				130
			}
		}
	} else {
		if inputs[17] <= 18 {
			133
		} else {
			106
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees3class1(inputs : [u32;18],) -> pub u32 {
	if inputs[12] <= 213 {
		if inputs[1] <= 128 {
			if inputs[5] <= 128 {
				if inputs[10] <= 191 {
					if inputs[17] <= 18 {
						if inputs[11] <= 128 {
							108
						} else {
							137
						}
					} else {
						150
					}
				} else {
					if inputs[16] <= 128 {
						126
					} else {
						108
					}
				}
			} else {
				149
			}
		} else {
			if inputs[9] <= 128 {
				if inputs[17] <= 91 {
					106
				} else {
					124
				}
			} else {
				if inputs[12] <= 128 {
					146
				} else {
					if inputs[13] <= 164 {
						109
					} else {
						129
					}
				}
			}
		}
	} else {
		if inputs[17] <= 18 {
			131
		} else {
			155
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees3class2(inputs : [u32;18],) -> pub u32 {
	if inputs[8] <= 64 {
		105
	} else {
		139
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees4class0(inputs : [u32;18],) -> pub u32 {
	if inputs[12] <= 213 {
		if inputs[12] <= 128 {
			if inputs[16] <= 128 {
				if inputs[13] <= 91 {
					133
				} else {
					149
				}
			} else {
				if inputs[0] <= 213 {
					if inputs[9] <= 213 {
						if inputs[4] <= 128 {
							105
						} else {
							122
						}
					} else {
						129
					}
				} else {
					133
				}
			}
		} else {
			if inputs[9] <= 213 {
				if inputs[1] <= 128 {
					if inputs[13] <= 91 {
						123
					} else {
						if inputs[10] <= 191 {
							132
						} else {
							149
						}
					}
				} else {
					if inputs[17] <= 91 {
						151
					} else {
						131
					}
				}
			} else {
				129
			}
		}
	} else {
		if inputs[17] <= 18 {
			132
		} else {
			108
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees4class1(inputs : [u32;18],) -> pub u32 {
	if inputs[1] <= 128 {
		if inputs[15] <= 128 {
			if inputs[10] <= 191 {
				if inputs[13] <= 200 {
					if inputs[11] <= 128 {
						145
					} else {
						132
					}
				} else {
					127
				}
			} else {
				117
			}
		} else {
			if inputs[14] <= 64 {
				if inputs[13] <= 182 {
					111
				} else {
					140
				}
			} else {
				150
			}
		}
	} else {
		if inputs[13] <= 128 {
			if inputs[9] <= 213 {
				106
			} else {
				128
			}
		} else {
			if inputs[17] <= 18 {
				109
			} else {
				if inputs[14] <= 191 {
					if inputs[2] <= 128 {
						134
					} else {
						114
					}
				} else {
					if inputs[17] <= 55 {
						132
					} else {
						151
					}
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees4class2(inputs : [u32;18],) -> pub u32 {
	if inputs[8] <= 64 {
		106
	} else {
		137
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees5class0(inputs : [u32;18],) -> pub u32 {
	if inputs[17] <= 55 {
		if inputs[1] <= 128 {
			if inputs[5] <= 128 {
				if inputs[12] <= 213 {
					if inputs[17] <= 18 {
						if inputs[14] <= 64 {
							151
						} else {
							131
						}
					} else {
						if inputs[13] <= 128 {
							146
						} else {
							111
						}
					}
				} else {
					115
				}
			} else {
				111
			}
		} else {
			if inputs[13] <= 200 {
				150
			} else {
				if inputs[9] <= 128 {
					141
				} else {
					128
				}
			}
		}
	} else {
		if inputs[14] <= 191 {
			if inputs[10] <= 191 {
				124
			} else {
				146
			}
		} else {
			if inputs[12] <= 128 {
				109
			} else {
				if inputs[12] <= 213 {
					if inputs[4] <= 128 {
						124
					} else {
						144
					}
				} else {
					111
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees5class1(inputs : [u32;18],) -> pub u32 {
	if inputs[12] <= 213 {
		if inputs[1] <= 128 {
			if inputs[5] <= 128 {
				if inputs[10] <= 191 {
					if inputs[17] <= 18 {
						if inputs[11] <= 128 {
							110
						} else {
							134
						}
					} else {
						145
					}
				} else {
					if inputs[16] <= 128 {
						126
					} else {
						110
					}
				}
			} else {
				if inputs[7] <= 128 {
					132
				} else {
					146
				}
			}
		} else {
			if inputs[17] <= 55 {
				if inputs[12] <= 128 {
					124
				} else {
					109
				}
			} else {
				if inputs[13] <= 128 {
					if inputs[10] <= 191 {
						127
					} else {
						113
					}
				} else {
					if inputs[14] <= 191 {
						121
					} else {
						146
					}
				}
			}
		}
	} else {
		if inputs[17] <= 18 {
			130
		} else {
			149
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees5class2(inputs : [u32;18],) -> pub u32 {
	if inputs[6] <= 128 {
		106
	} else {
		if inputs[8] <= 64 {
			116
		} else {
			150
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees6class0(inputs : [u32;18],) -> pub u32 {
	if inputs[12] <= 213 {
		if inputs[12] <= 128 {
			if inputs[14] <= 191 {
				if inputs[10] <= 191 {
					if inputs[16] <= 128 {
						139
					} else {
						110
					}
				} else {
					149
				}
			} else {
				if inputs[9] <= 128 {
					126
				} else {
					109
				}
			}
		} else {
			if inputs[9] <= 213 {
				if inputs[16] <= 128 {
					if inputs[1] <= 128 {
						125
					} else {
						140
					}
				} else {
					if inputs[5] <= 128 {
						150
					} else {
						if inputs[2] <= 128 {
							131
						} else {
							146
						}
					}
				}
			} else {
				128
			}
		}
	} else {
		if inputs[17] <= 18 {
			131
		} else {
			110
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees6class1(inputs : [u32;18],) -> pub u32 {
	if inputs[12] <= 213 {
		if inputs[1] <= 128 {
			if inputs[5] <= 128 {
				if inputs[10] <= 191 {
					if inputs[14] <= 191 {
						if inputs[12] <= 128 {
							134
						} else {
							111
						}
					} else {
						145
					}
				} else {
					if inputs[16] <= 128 {
						126
					} else {
						111
					}
				}
			} else {
				if inputs[7] <= 128 {
					131
				} else {
					145
				}
			}
		} else {
			if inputs[9] <= 128 {
				if inputs[17] <= 91 {
					109
				} else {
					126
				}
			} else {
				if inputs[14] <= 191 {
					111
				} else {
					if inputs[12] <= 128 {
						147
					} else {
						if inputs[4] <= 128 {
							135
						} else {
							115
						}
					}
				}
			}
		}
	} else {
		if inputs[17] <= 18 {
			129
		} else {
			147
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees6class2(inputs : [u32;18],) -> pub u32 {
	if inputs[6] <= 128 {
		107
	} else {
		if inputs[17] <= 164 {
			141
		} else {
			127
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees7class0(inputs : [u32;18],) -> pub u32 {
	if inputs[17] <= 55 {
		if inputs[1] <= 128 {
			if inputs[5] <= 128 {
				if inputs[13] <= 91 {
					120
				} else {
					if inputs[10] <= 191 {
						if inputs[11] <= 128 {
							135
						} else {
							120
						}
					} else {
						146
					}
				}
			} else {
				113
			}
		} else {
			if inputs[13] <= 200 {
				147
			} else {
				if inputs[4] <= 128 {
					if inputs[9] <= 128 {
						134
					} else {
						120
					}
				} else {
					140
				}
			}
		}
	} else {
		if inputs[14] <= 191 {
			if inputs[10] <= 191 {
				123
			} else {
				143
			}
		} else {
			if inputs[12] <= 128 {
				111
			} else {
				if inputs[12] <= 213 {
					if inputs[4] <= 128 {
						124
					} else {
						140
					}
				} else {
					113
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees7class1(inputs : [u32;18],) -> pub u32 {
	if inputs[12] <= 213 {
		if inputs[1] <= 128 {
			if inputs[5] <= 128 {
				if inputs[10] <= 191 {
					if inputs[14] <= 191 {
						if inputs[12] <= 128 {
							133
						} else {
							113
						}
					} else {
						144
					}
				} else {
					if inputs[13] <= 128 {
						127
					} else {
						112
					}
				}
			} else {
				if inputs[7] <= 128 {
					131
				} else {
					143
				}
			}
		} else {
			if inputs[9] <= 128 {
				if inputs[17] <= 91 {
					110
				} else {
					126
				}
			} else {
				if inputs[14] <= 191 {
					112
				} else {
					if inputs[12] <= 128 {
						145
					} else {
						125
					}
				}
			}
		}
	} else {
		if inputs[17] <= 18 {
			129
		} else {
			146
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees7class2(inputs : [u32;18],) -> pub u32 {
	if inputs[6] <= 128 {
		108
	} else {
		if inputs[17] <= 164 {
			140
		} else {
			128
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees8class0(inputs : [u32;18],) -> pub u32 {
	if inputs[17] <= 55 {
		if inputs[1] <= 128 {
			if inputs[5] <= 128 {
				if inputs[13] <= 91 {
					120
				} else {
					if inputs[10] <= 191 {
						if inputs[11] <= 128 {
							134
						} else {
							121
						}
					} else {
						144
					}
				}
			} else {
				114
			}
		} else {
			if inputs[13] <= 200 {
				146
			} else {
				if inputs[4] <= 128 {
					if inputs[9] <= 128 {
						133
					} else {
						121
					}
				} else {
					138
				}
			}
		}
	} else {
		if inputs[10] <= 191 {
			if inputs[17] <= 91 {
				129
			} else {
				110
			}
		} else {
			if inputs[5] <= 128 {
				140
			} else {
				if inputs[13] <= 128 {
					132
				} else {
					115
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees8class1(inputs : [u32;18],) -> pub u32 {
	if inputs[12] <= 213 {
		if inputs[1] <= 128 {
			if inputs[5] <= 128 {
				if inputs[10] <= 191 {
					if inputs[14] <= 191 {
						if inputs[12] <= 128 {
							132
						} else {
							114
						}
					} else {
						142
					}
				} else {
					if inputs[13] <= 128 {
						127
					} else {
						113
					}
				}
			} else {
				if inputs[7] <= 128 {
					130
				} else {
					142
				}
			}
		} else {
			if inputs[13] <= 128 {
				if inputs[12] <= 128 {
					123
				} else {
					111
				}
			} else {
				if inputs[2] <= 128 {
					if inputs[17] <= 18 {
						116
					} else {
						if inputs[13] <= 237 {
							144
						} else {
							133
						}
					}
				} else {
					115
				}
			}
		}
	} else {
		if inputs[17] <= 18 {
			129
		} else {
			145
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees8class2(inputs : [u32;18],) -> pub u32 {
	if inputs[8] <= 64 {
		108
	} else {
		137
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees9class0(inputs : [u32;18],) -> pub u32 {
	if inputs[17] <= 18 {
		if inputs[1] <= 128 {
			if inputs[13] <= 109 {
				118
			} else {
				if inputs[11] <= 213 {
					143
				} else {
					128
				}
			}
		} else {
			145
		}
	} else {
		if inputs[13] <= 128 {
			if inputs[17] <= 91 {
				143
			} else {
				123
			}
		} else {
			if inputs[2] <= 128 {
				if inputs[15] <= 128 {
					if inputs[9] <= 128 {
						114
					} else {
						140
					}
				} else {
					if inputs[0] <= 213 {
						108
					} else {
						121
					}
				}
			} else {
				132
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees9class1(inputs : [u32;18],) -> pub u32 {
	if inputs[12] <= 213 {
		if inputs[15] <= 128 {
			if inputs[10] <= 191 {
				if inputs[17] <= 18 {
					if inputs[13] <= 128 {
						131
					} else {
						114
					}
				} else {
					133
				}
			} else {
				111
			}
		} else {
			if inputs[2] <= 128 {
				if inputs[14] <= 64 {
					119
				} else {
					if inputs[0] <= 213 {
						143
					} else {
						if inputs[17] <= 55 {
							122
						} else {
							136
						}
					}
				}
			} else {
				117
			}
		}
	} else {
		if inputs[17] <= 18 {
			129
		} else {
			144
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees9class2(inputs : [u32;18],) -> pub u32 {
	if inputs[6] <= 128 {
		109
	} else {
		136
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn count_prob<N>(class_prob : [u32;N],) -> pub u32 {
	let mut cls: Field = class_prob[0] as Field;
	for i in 1..N {
		cls = quantize_arithmetic::add(cls,127,128,class_prob[i] as Field,127,128,127,128);
	}
	cls = quantize_arithmetic::mul(cls,127,128,1,0,1,125,13);
	((cls*128) as u32)/128
}
fn main(inputs : [u32;18],) -> pub u32 {
	let trees0_class0: u32 = trees0class0(inputs);
	let trees0_class1: u32 = trees0class1(inputs);
	let trees0_class2: u32 = trees0class2(inputs);
	let trees1_class0: u32 = trees1class0(inputs);
	let trees1_class1: u32 = trees1class1(inputs);
	let trees1_class2: u32 = trees1class2(inputs);
	let trees2_class0: u32 = trees2class0(inputs);
	let trees2_class1: u32 = trees2class1(inputs);
	let trees2_class2: u32 = trees2class2(inputs);
	let trees3_class0: u32 = trees3class0(inputs);
	let trees3_class1: u32 = trees3class1(inputs);
	let trees3_class2: u32 = trees3class2(inputs);
	let trees4_class0: u32 = trees4class0(inputs);
	let trees4_class1: u32 = trees4class1(inputs);
	let trees4_class2: u32 = trees4class2(inputs);
	let trees5_class0: u32 = trees5class0(inputs);
	let trees5_class1: u32 = trees5class1(inputs);
	let trees5_class2: u32 = trees5class2(inputs);
	let trees6_class0: u32 = trees6class0(inputs);
	let trees6_class1: u32 = trees6class1(inputs);
	let trees6_class2: u32 = trees6class2(inputs);
	let trees7_class0: u32 = trees7class0(inputs);
	let trees7_class1: u32 = trees7class1(inputs);
	let trees7_class2: u32 = trees7class2(inputs);
	let trees8_class0: u32 = trees8class0(inputs);
	let trees8_class1: u32 = trees8class1(inputs);
	let trees8_class2: u32 = trees8class2(inputs);
	let trees9_class0: u32 = trees9class0(inputs);
	let trees9_class1: u32 = trees9class1(inputs);
	let trees9_class2: u32 = trees9class2(inputs);
	let c0: u32 = count_prob([trees0_class0, trees1_class0, trees2_class0, trees3_class0, trees4_class0, trees5_class0, trees6_class0, trees7_class0, trees8_class0, trees9_class0]);
	let c1: u32 = count_prob([trees0_class1, trees1_class1, trees2_class1, trees3_class1, trees4_class1, trees5_class1, trees6_class1, trees7_class1, trees8_class1, trees9_class1]);
	let c2: u32 = count_prob([trees0_class2, trees1_class2, trees2_class2, trees3_class2, trees4_class2, trees5_class2, trees6_class2, trees7_class2, trees8_class2, trees9_class2]);
	let mut max_ele_index: u32 = c0;
	let mut res: u32 = 0;
	if c1 > max_ele_index {
		max_ele_index = c1;
		res = 1;
	}
	if c2 > max_ele_index {
		max_ele_index = c2;
		res = 2;
	}
	println(res);
	res
}