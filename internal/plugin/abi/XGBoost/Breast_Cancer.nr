// Code generated from Python2Noir
// inputs quantization scale reciprocal: 255
// inputs quantization zero-point: 0
// quantize_type: uint8
use dep::std::println;
use dep::quantization_arithmetic;
fn trees0class0(inputs : [u32;9],) -> pub u32 {
	if inputs[3] <= 16 {
		if inputs[2] <= 115 {
			if inputs[0] <= 77 {
				if inputs[6] <= 128 {
					101
				} else {
					127
				}
			} else {
				68
			}
		} else {
			if inputs[8] <= 128 {
				if inputs[2] <= 166 {
					if inputs[0] <= 128 {
						127
					} else {
						153
					}
				} else {
					101
				}
			} else {
				if inputs[0] <= 128 {
					if inputs[6] <= 128 {
						if inputs[0] <= 77 {
							127
						} else {
							97
						}
					} else {
						if inputs[2] <= 166 {
							140
						} else {
							108
						}
					}
				} else {
					82
				}
			}
		}
	} else {
		if inputs[6] <= 128 {
			if inputs[8] <= 128 {
				if inputs[3] <= 48 {
					142
				} else {
					180
				}
			} else {
				if inputs[0] <= 128 {
					158
				} else {
					if inputs[3] <= 48 {
						108
					} else {
						127
					}
				}
			}
		} else {
			if inputs[4] <= 128 {
				if inputs[2] <= 115 {
					127
				} else {
					89
				}
			} else {
				if inputs[2] <= 115 {
					101
				} else {
					if inputs[0] <= 128 {
						146
					} else {
						127
					}
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees0class1(inputs : [u32;9],) -> pub u32 {
	if inputs[3] <= 16 {
		if inputs[2] <= 89 {
			if inputs[0] <= 128 {
				if inputs[2] <= 64 {
					85
				} else {
					140
				}
			} else {
				71
			}
		} else {
			if inputs[8] <= 128 {
				if inputs[2] <= 166 {
					if inputs[0] <= 128 {
						130
					} else {
						148
					}
				} else {
					106
				}
			} else {
				if inputs[6] <= 128 {
					if inputs[0] <= 77 {
						119
					} else {
						89
					}
				} else {
					if inputs[0] <= 179 {
						if inputs[0] <= 128 {
							117
						} else {
							93
						}
					} else {
						131
					}
				}
			}
		}
	} else {
		if inputs[6] <= 128 {
			if inputs[8] <= 128 {
				if inputs[3] <= 48 {
					140
				} else {
					171
				}
			} else {
				if inputs[0] <= 128 {
					152
				} else {
					116
				}
			}
		} else {
			if inputs[8] <= 128 {
				if inputs[2] <= 166 {
					123
				} else {
					85
				}
			} else {
				if inputs[4] <= 128 {
					115
				} else {
					137
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees1class0(inputs : [u32;9],) -> pub u32 {
	if inputs[3] <= 16 {
		if inputs[2] <= 89 {
			if inputs[0] <= 128 {
				if inputs[2] <= 64 {
					92
				} else {
					138
				}
			} else {
				80
			}
		} else {
			if inputs[8] <= 128 {
				if inputs[2] <= 166 {
					if inputs[0] <= 128 {
						129
					} else {
						145
					}
				} else {
					109
				}
			} else {
				if inputs[6] <= 128 {
					if inputs[0] <= 77 {
						121
					} else {
						97
					}
				} else {
					if inputs[0] <= 179 {
						if inputs[0] <= 128 {
							120
						} else {
							100
						}
					} else {
						130
					}
				}
			}
		}
	} else {
		if inputs[6] <= 128 {
			if inputs[0] <= 128 {
				161
			} else {
				if inputs[3] <= 48 {
					114
				} else {
					150
				}
			}
		} else {
			if inputs[8] <= 128 {
				if inputs[2] <= 166 {
					124
				} else {
					91
				}
			} else {
				if inputs[4] <= 128 {
					118
				} else {
					135
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees1class1(inputs : [u32;9],) -> pub u32 {
	if inputs[3] <= 16 {
		if inputs[2] <= 89 {
			if inputs[0] <= 128 {
				if inputs[2] <= 64 {
					98
				} else {
					136
				}
			} else {
				85
			}
		} else {
			if inputs[8] <= 128 {
				if inputs[2] <= 166 {
					if inputs[0] <= 128 {
						129
					} else {
						142
					}
				} else {
					112
				}
			} else {
				if inputs[6] <= 128 {
					if inputs[7] <= 159 {
						if inputs[0] <= 128 {
							124
						} else {
							103
						}
					} else {
						91
					}
				} else {
					if inputs[0] <= 179 {
						if inputs[0] <= 128 {
							121
						} else {
							104
						}
					} else {
						130
					}
				}
			}
		}
	} else {
		if inputs[6] <= 128 {
			if inputs[8] <= 128 {
				if inputs[1] <= 191 {
					162
				} else {
					137
				}
			} else {
				if inputs[0] <= 128 {
					143
				} else {
					117
				}
			}
		} else {
			if inputs[8] <= 128 {
				if inputs[2] <= 166 {
					124
				} else {
					95
				}
			} else {
				if inputs[0] <= 128 {
					116
				} else {
					133
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees2class0(inputs : [u32;9],) -> pub u32 {
	if inputs[3] <= 16 {
		if inputs[2] <= 89 {
			if inputs[1] <= 191 {
				88
			} else {
				if inputs[2] <= 64 {
					100
				} else {
					138
				}
			}
		} else {
			if inputs[0] <= 77 {
				133
			} else {
				if inputs[6] <= 128 {
					if inputs[7] <= 96 {
						if inputs[0] <= 128 {
							117
						} else {
							100
						}
					} else {
						123
					}
				} else {
					if inputs[0] <= 179 {
						if inputs[2] <= 115 {
							108
						} else {
							121
						}
					} else {
						if inputs[7] <= 32 {
							116
						} else {
							146
						}
					}
				}
			}
		}
	} else {
		if inputs[6] <= 128 {
			if inputs[8] <= 128 {
				if inputs[3] <= 48 {
					134
				} else {
					158
				}
			} else {
				if inputs[0] <= 128 {
					141
				} else {
					119
				}
			}
		} else {
			if inputs[4] <= 128 {
				if inputs[3] <= 80 {
					if inputs[7] <= 32 {
						92
					} else {
						126
					}
				} else {
					129
				}
			} else {
				if inputs[2] <= 140 {
					109
				} else {
					147
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees2class1(inputs : [u32;9],) -> pub u32 {
	if inputs[3] <= 16 {
		if inputs[2] <= 89 {
			if inputs[0] <= 128 {
				if inputs[2] <= 64 {
					if inputs[7] <= 128 {
						102
					} else {
						121
					}
				} else {
					135
				}
			} else {
				92
			}
		} else {
			if inputs[8] <= 128 {
				if inputs[2] <= 166 {
					if inputs[0] <= 128 {
						130
					} else {
						141
					}
				} else {
					115
				}
			} else {
				if inputs[7] <= 223 {
					if inputs[0] <= 128 {
						if inputs[7] <= 96 {
							130
						} else {
							110
						}
					} else {
						if inputs[1] <= 191 {
							106
						} else {
							123
						}
					}
				} else {
					130
				}
			}
		}
	} else {
		if inputs[6] <= 128 {
			if inputs[0] <= 128 {
				if inputs[3] <= 48 {
					156
				} else {
					135
				}
			} else {
				if inputs[3] <= 48 {
					116
				} else {
					143
				}
			}
		} else {
			if inputs[4] <= 128 {
				if inputs[3] <= 80 {
					if inputs[7] <= 32 {
						96
					} else {
						126
					}
				} else {
					129
				}
			} else {
				if inputs[2] <= 115 {
					109
				} else {
					141
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees3class0(inputs : [u32;9],) -> pub u32 {
	if inputs[2] <= 64 {
		101
	} else {
		if inputs[2] <= 242 {
			if inputs[2] <= 191 {
				if inputs[8] <= 128 {
					if inputs[1] <= 191 {
						145
					} else {
						if inputs[6] <= 128 {
							142
						} else {
							114
						}
					}
				} else {
					if inputs[2] <= 166 {
						if inputs[7] <= 96 {
							115
						} else {
							127
						}
					} else {
						if inputs[0] <= 128 {
							139
						} else {
							126
						}
					}
				}
			} else {
				if inputs[6] <= 128 {
					120
				} else {
					98
				}
			}
		} else {
			139
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees3class1(inputs : [u32;9],) -> pub u32 {
	if inputs[3] <= 16 {
		if inputs[2] <= 89 {
			if inputs[1] <= 191 {
				94
			} else {
				if inputs[2] <= 64 {
					109
				} else {
					139
				}
			}
		} else {
			if inputs[6] <= 128 {
				if inputs[7] <= 159 {
					if inputs[1] <= 191 {
						if inputs[7] <= 32 {
							128
						} else {
							102
						}
					} else {
						if inputs[7] <= 32 {
							112
						} else {
							143
						}
					}
				} else {
					96
				}
			} else {
				if inputs[0] <= 179 {
					if inputs[7] <= 96 {
						if inputs[2] <= 115 {
							109
						} else {
							140
						}
					} else {
						112
					}
				} else {
					if inputs[7] <= 32 {
						120
					} else {
						147
					}
				}
			}
		}
	} else {
		if inputs[1] <= 191 {
			if inputs[7] <= 32 {
				113
			} else {
				if inputs[2] <= 140 {
					167
				} else {
					if inputs[2] <= 166 {
						132
					} else {
						126
					}
				}
			}
		} else {
			if inputs[3] <= 80 {
				if inputs[3] <= 48 {
					if inputs[0] <= 128 {
						if inputs[4] <= 128 {
							139
						} else {
							123
						}
					} else {
						101
					}
				} else {
					98
				}
			} else {
				149
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees4class0(inputs : [u32;9],) -> pub u32 {
	if inputs[3] <= 16 {
		if inputs[6] <= 128 {
			if inputs[7] <= 159 {
				if inputs[0] <= 128 {
					if inputs[0] <= 77 {
						137
					} else {
						if inputs[7] <= 32 {
							109
						} else {
							132
						}
					}
				} else {
					if inputs[7] <= 32 {
						123
					} else {
						if inputs[0] <= 179 {
							121
						} else {
							96
						}
					}
				}
			} else {
				96
			}
		} else {
			if inputs[7] <= 223 {
				if inputs[7] <= 96 {
					if inputs[1] <= 191 {
						if inputs[2] <= 179 {
							109
						} else {
							134
						}
					} else {
						if inputs[2] <= 115 {
							117
						} else {
							150
						}
					}
				} else {
					if inputs[2] <= 140 {
						99
					} else {
						118
					}
				}
			} else {
				153
			}
		}
	} else {
		if inputs[6] <= 128 {
			if inputs[2] <= 140 {
				if inputs[0] <= 128 {
					152
				} else {
					134
				}
			} else {
				if inputs[2] <= 166 {
					125
				} else {
					130
				}
			}
		} else {
			if inputs[4] <= 128 {
				if inputs[2] <= 140 {
					129
				} else {
					106
				}
			} else {
				if inputs[2] <= 140 {
					114
				} else {
					145
				}
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn trees4class1(inputs : [u32;9],) -> pub u32 {
	if inputs[2] <= 64 {
		if inputs[7] <= 159 {
			105
		} else {
			123
		}
	} else {
		if inputs[2] <= 191 {
			if inputs[0] <= 77 {
				if inputs[2] <= 140 {
					120
				} else {
					150
				}
			} else {
				if inputs[7] <= 96 {
					if inputs[0] <= 128 {
						if inputs[2] <= 140 {
							136
						} else {
							119
						}
					} else {
						if inputs[4] <= 128 {
							102
						} else {
							121
						}
					}
				} else {
					if inputs[4] <= 128 {
						154
					} else {
						if inputs[0] <= 128 {
							108
						} else {
							139
						}
					}
				}
			}
		} else {
			if inputs[2] <= 242 {
				if inputs[6] <= 128 {
					122
				} else {
					101
				}
			} else {
				135
			}
		}
	}
	// inputs quantization scale reciprocal: 128, zero-point: 127

}
fn count_prob<N>(class_prob : [u32;N],) -> pub u32 {
	let mut cls: Field = class_prob[0] as Field;
	for i in 1..N {
		cls = quantization_arithmetic::add(cls,127,128,class_prob[i] as Field,127,128,127,128);
	}
	cls = quantization_arithmetic::mul(cls,127,128,1,0,1,125,13);
	((cls*128) as u32)/128
}
fn main(inputs : [u32;9],) -> pub u32 {
	let trees0_class0: u32 = trees0class0(inputs);
	let trees0_class1: u32 = trees0class1(inputs);
	let trees1_class0: u32 = trees1class0(inputs);
	let trees1_class1: u32 = trees1class1(inputs);
	let trees2_class0: u32 = trees2class0(inputs);
	let trees2_class1: u32 = trees2class1(inputs);
	let trees3_class0: u32 = trees3class0(inputs);
	let trees3_class1: u32 = trees3class1(inputs);
	let trees4_class0: u32 = trees4class0(inputs);
	let trees4_class1: u32 = trees4class1(inputs);
	let c0: u32 = count_prob([trees0_class0, trees1_class0, trees2_class0, trees3_class0, trees4_class0]);
	let c1: u32 = count_prob([trees0_class1, trees1_class1, trees2_class1, trees3_class1, trees4_class1]);
	let mut max_ele_index: u32 = c0;
	let mut res: u32 = 0;
	if c1 > max_ele_index {
		max_ele_index = c1;
		res = 1;
	}
	println(res);
	res
}